<?xml version="1.0" encoding="UTF-8"?>
<NFV xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../xsd/nfvSchema.xsd">
  <graphs>
    <graph id="0">
     <node functional_type="WEBCLIENT" name="nodeA">
        <neighbour name="node1"/>
        <configuration description="A simple description" name="confA">
          <webclient nameWebServer="nodeB"/>
        </configuration>
      </node>
      <node functional_type="FIREWALL" name="node1">
        <neighbour name="nodeA"/>
        <neighbour name="node2"/>
        <configuration description="A simple description" name="conf1">
          <firewall>
            <elements>
              <source>nodeC</source>
              <destination>nodeD</destination>
            </elements>
          </firewall>
        </configuration>
      </node>
      <node functional_type="DPI" name="node2">
        <neighbour name="node1"/>
        <neighbour name="node3"/>
        <configuration description="A simple description" name="conf2">
          <dpi>
          	<notAllowed>nodeC</notAllowed>
          </dpi>
        </configuration>
      </node>
      <node functional_type="CACHE" name="node3">
        <neighbour name="node2"/>
        <neighbour name="node4"/>
        <configuration description="A simple description" name="conf3">
          <cache>
          	<resource>nodeA</resource>
          	<resource>node1</resource>
          	<resource>node2</resource>
          </cache>
        </configuration>
      </node>
	  <node functional_type="FIELDMODIFIER" name="node4">
        <neighbour name="node3"/>
        <neighbour name="node5"/>
        <configuration description="A simple description" name="conf4">
         <fieldmodifier>
          	<name>name</name>
         </fieldmodifier>
        </configuration>
      </node>
      <node functional_type="FIELDMODIFIER" name="node5">
        <neighbour name="node4"/>
        <neighbour name="nodeB"/>
        <configuration description="A simple description" name="conf5">
         <fieldmodifier>
          	<name>name</name>
         </fieldmodifier>
        </configuration>
      </node>
      <node functional_type="WEBSERVER" name="nodeB">
        <neighbour name="node5"/>
        <configuration description="A simple description" name="confB">
          <webserver>
          	<name>nodeB</name>
          </webserver>
        </configuration>
      </node>
    </graph>
  </graphs>
 <Constraints>
	  <NodeConstraints>
			<NodeMetrics node="node1" reqStorage="10"/>
			<NodeMetrics node="node2" reqStorage="10"/>
			<NodeMetrics node="node3" reqStorage="10"/>
			<NodeMetrics node="node4" reqStorage="10"/>
			<NodeMetrics node="node5" reqStorage="10"/>
	  </NodeConstraints>
	  <BandwidthConstraints>
			<BandwidthMetrics src="node4" dst="node2" reqLatency="10"/>
	  </BandwidthConstraints>
  </Constraints>
  <PropertyDefinition>
  		<Property graph="0" name="IsolationProperty" src="nodeA" dst="nodeB"/> 		
  </PropertyDefinition>
  <Hosts>
  	<Host name="hostA" cpu="2" cores="2" memory="4" diskStorage="10" type="CLIENT" fixedEndpoint="nodeA"/>
  	<Host name="host1" cpu="1" cores="4" memory="16" diskStorage="50" maxVNF="1" type="MIDDLEBOX">
		<SupportedVNF functional_type="FIREWALL"/>
		<SupportedVNF functional_type="CACHE"/>
		<SupportedVNF functional_type="ANTISPAM"/>
		<SupportedVNF functional_type="NAT"/>
		<SupportedVNF functional_type="DPI"/>
		<SupportedVNF functional_type="FIELDMODIFIER"/>
	</Host>
  	<Host name="host2" cpu="3" cores="8" memory="16" diskStorage="50" maxVNF="4" type="MIDDLEBOX">
		<SupportedVNF functional_type="FIREWALL"/>
		<SupportedVNF functional_type="CACHE"/>
		<SupportedVNF functional_type="ANTISPAM"/>
		<SupportedVNF functional_type="NAT"/>
		<SupportedVNF functional_type="DPI"/>
		<SupportedVNF functional_type="FIELDMODIFIER"/>
	</Host>
  	<Host name="host3" cpu="4" cores="4" memory="16" diskStorage="50" maxVNF="4" type="MIDDLEBOX">
		<SupportedVNF functional_type="FIREWALL"/>
		<SupportedVNF functional_type="CACHE"/>
		<SupportedVNF functional_type="ANTISPAM"/>
		<SupportedVNF functional_type="NAT"/>
		<SupportedVNF functional_type="DPI"/>
		<SupportedVNF functional_type="FIELDMODIFIER"/>
	</Host>
	<Host name="host4" cpu="4" cores="4" memory="16" diskStorage="50" maxVNF="4" type="MIDDLEBOX">
		<SupportedVNF functional_type="FIREWALL"/>
		<SupportedVNF functional_type="CACHE"/>
		<SupportedVNF functional_type="FIELDMODIFIER"/>
	</Host>
	<Host name="host5" cpu="4" cores="4" memory="16" diskStorage="50" maxVNF="4" type="MIDDLEBOX">
		<SupportedVNF functional_type="FIREWALL"/>
		<SupportedVNF functional_type="CACHE"/>
		<SupportedVNF functional_type="ANTISPAM"/>
		<SupportedVNF functional_type="NAT"/>
		<SupportedVNF functional_type="DPI"/>
		<SupportedVNF functional_type="FIELDMODIFIER"/>
	</Host>
	<Host name="host6" cpu="4" cores="4" memory="16" diskStorage="50" maxVNF="4" type="MIDDLEBOX">
		<SupportedVNF functional_type="FIREWALL"/>
		<SupportedVNF functional_type="CACHE"/>
		<SupportedVNF functional_type="ANTISPAM"/>
		<SupportedVNF functional_type="NAT"/>
		<SupportedVNF functional_type="DPI"/>
		<SupportedVNF functional_type="FIELDMODIFIER"/>
	</Host>
	<Host name="host7" cpu="4" cores="4" memory="16" diskStorage="50" maxVNF="4" type="MIDDLEBOX">
		<SupportedVNF functional_type="FIREWALL"/>
		<SupportedVNF functional_type="CACHE"/>
		<SupportedVNF functional_type="ANTISPAM"/>
		<SupportedVNF functional_type="NAT"/>
		<SupportedVNF functional_type="DPI"/>
		<SupportedVNF functional_type="FIELDMODIFIER"/>
	</Host>
  	<Host name="hostB" cpu="2" cores="2" memory="4" diskStorage="50" type="SERVER" fixedEndpoint="nodeB"/>
  </Hosts>
   <Connections>
  	<Connection sourceHost="hostA" destHost="host1" avgLatency ="1"/>
  	<Connection sourceHost="hostA" destHost="host2" avgLatency ="100"/>
  	<Connection sourceHost="host1" destHost="host2" avgLatency ="1"/>
  	<Connection sourceHost="host1" destHost="host3" avgLatency ="1"/>
  	<Connection sourceHost="host1" destHost="host4" avgLatency ="1000"/>
  	<Connection sourceHost="host2" destHost="host1" avgLatency ="1"/>
  	<Connection sourceHost="host2" destHost="host3" avgLatency ="1"/>
  	<Connection sourceHost="host2" destHost="host4" avgLatency ="1"/>
  	<Connection sourceHost="host2" destHost="host6" avgLatency ="1"/>
  	<Connection sourceHost="host2" destHost="hostB" avgLatency ="100"/>
  	<Connection sourceHost="host3" destHost="host2" avgLatency ="1"/>
  	<Connection sourceHost="host3" destHost="host4" avgLatency ="1"/>
  	<Connection sourceHost="host3" destHost="host5" avgLatency ="1"/>
  	<Connection sourceHost="host3" destHost="hostB" avgLatency ="1"/>
  	<Connection sourceHost="host4" destHost="host5" avgLatency ="1"/>
  	<Connection sourceHost="host4" destHost="host7" avgLatency ="1"/>
  	<Connection sourceHost="host5" destHost="host6" avgLatency ="1"/>
  	<Connection sourceHost="host6" destHost="host7" avgLatency ="1"/>
  	<Connection sourceHost="host7" destHost="hostB" avgLatency ="1"/>
  </Connections>
  <ParsingString>(define-fun |integer_(let ((a!1 (forall ((node2_composition_n_0 Node) (node2_composition_p_0 packet))
             (let ((a!1 (and (send node2
                                   node2_composition_n_0
                                   node2_composition_p_0)
                             (or (= (dest node2_composition_p_0) nodeB)))))
               (=> a!1 (or (= node2_composition_n_0 node3)))))))
  (=> a!1 (and node2@host1 node3@host1)))| () Int
  0)
(define-fun node2@host6 () Bool
  false)
(define-fun |integer_(let ((a!1 (forall ((node3_composition_n_0 Node) (node3_composition_p_0 packet))
             (let ((a!1 (and (send node3
                                   node3_composition_n_0
                                   node3_composition_p_0)
                             (or (= (dest node3_composition_p_0) nodeB)))))
               (=> a!1 (or (= node3_composition_n_0 node4)))))))
  (=> a!1 (and node3@host1 node4@host1)))| () Int
  0)
(define-fun node5@host3 () Bool
  true)
(define-fun host2 () Bool
  false)
(define-fun |integer_(let ((a!1 (forall ((node4_composition_n_0 Node) (node4_composition_p_0 packet))
             (let ((a!1 (and (send node4
                                   node4_composition_n_0
                                   node4_composition_p_0)
                             (or (= (dest node4_composition_p_0) nodeB)))))
               (=> a!1 (or (= node4_composition_n_0 node5)))))))
  (=> a!1 (and node4@host4 node5@host7)))| () Int
  0)
(define-fun integer_node3@host7 () Int
  0)
(define-fun integer_host7 () Int
  0)
(define-fun |integer_(let ((a!1 (forall ((node3_composition_n_0 Node) (node3_composition_p_0 packet))
             (let ((a!1 (and (send node3
                                   node3_composition_n_0
                                   node3_composition_p_0)
                             (or (= (dest node3_composition_p_0) nodeB)))))
               (=> a!1 (or (= node3_composition_n_0 node4)))))))
  (=> a!1 (and node3@host6 node4@host7)))| () Int
  0)
(define-fun |integer_(let ((a!1 (forall ((node2_composition_n_0 Node) (node2_composition_p_0 packet))
             (let ((a!1 (and (send node2
                                   node2_composition_n_0
                                   node2_composition_p_0)
                             (or (= (dest node2_composition_p_0) nodeB)))))
               (=> a!1 (or (= node2_composition_n_0 node3)))))))
  (=> a!1 (and node2@host1 node3@host4)))| () Int
  0)
(define-fun integer_node4@host2 () Int
  0)
(define-fun node3@host1 () Bool
  false)
(define-fun host6 () Bool
  false)
(define-fun |integer_(let ((a!1 (forall ((node3_composition_n_0 Node) (node3_composition_p_0 packet))
             (let ((a!1 (and (send node3
                                   node3_composition_n_0
                                   node3_composition_p_0)
                             (or (= (dest node3_composition_p_0) nodeB)))))
               (=> a!1 (or (= node3_composition_n_0 node4)))))))
  (=> a!1 (and node3@host4 node4@host7)))| () Int
  0)
(define-fun integer_node3@host6 () Int
  0)
(define-fun integer_host5 () Int
  0)
(define-fun integer_node4@host7 () Int
  0)
(define-fun node4@host1 () Bool
  false)
(define-fun check_isolation_n_0_nodeA_nodeB () Node
  node5)
(define-fun integer_host1 () Int
  1)
(define-fun node3@host2 () Bool
  false)
(define-fun node3@host7 () Bool
  false)
(define-fun host7 () Bool
  false)
(define-fun |integer_(let ((a!1 (forall ((node3_composition_n_0 Node) (node3_composition_p_0 packet))
             (let ((a!1 (and (send node3
                                   node3_composition_n_0
                                   node3_composition_p_0)
                             (or (= (dest node3_composition_p_0) nodeB)))))
               (=> a!1 (or (= node3_composition_n_0 node4)))))))
  (=> a!1 (and node3@host2 node4@host1)))| () Int
  0)
(define-fun |integer_(let ((a!1 (forall ((node3_composition_n_0 Node) (node3_composition_p_0 packet))
             (let ((a!1 (and (send node3
                                   node3_composition_n_0
                                   node3_composition_p_0)
                             (or (= (dest node3_composition_p_0) nodeB)))))
               (=> a!1 (or (= node3_composition_n_0 node4)))))))
  (=> a!1 (and node3@host5 node4@host6)))| () Int
  0)
(define-fun node4@host4 () Bool
  false)
(define-fun integer_node3@host3 () Int
  1)
(define-fun |integer_(let ((a!1 (forall ((node2_composition_n_0 Node) (node2_composition_p_0 packet))
             (let ((a!1 (and (send node2
                                   node2_composition_n_0
                                   node2_composition_p_0)
                             (or (= (dest node2_composition_p_0) nodeB)))))
               (=> a!1 (or (= node2_composition_n_0 node3)))))))
  (=> a!1 (and node2@host2 node3@host4)))| () Int
  0)
(define-fun node4@host3 () Bool
  true)
(define-fun |integer_(let ((a!1 (forall ((node3_composition_n_0 Node) (node3_composition_p_0 packet))
             (let ((a!1 (and (send node3
                                   node3_composition_n_0
                                   node3_composition_p_0)
                             (or (= (dest node3_composition_p_0) nodeB)))))
               (=> a!1 (or (= node3_composition_n_0 node4)))))))
  (=> a!1 (and node3@host1 node4@host3)))| () Int
  0)
(define-fun |integer_(let ((a!1 (forall ((node1_composition_n_0 Node) (node1_composition_p_0 packet))
             (let ((a!1 (and (send node1
                                   node1_composition_n_0
                                   node1_composition_p_0)
                             (or (= (dest node1_composition_p_0) nodeB)))))
               (=> a!1 (or (= node1_composition_n_0 node2)))))))
  (=> a!1 (and node1@host1 node2@host1)))| () Int
  0)
(define-fun node1@host1 () Bool
  true)
(define-fun |integer_(let ((a!1 (forall ((node5_composition_n_0 Node) (node5_composition_p_0 packet))
             (let ((a!1 (and (send node5
                                   node5_composition_n_0
                                   node5_composition_p_0)
                             (or (= (dest node5_composition_p_0) nodeB)))))
               (=> a!1 (or (= node5_composition_n_0 nodeB)))))))
  (=> a!1 node5@host7))| () Int
  0)
(define-fun |integer_(let ((a!1 (forall ((node3_composition_n_0 Node) (node3_composition_p_0 packet))
             (let ((a!1 (and (send node3
                                   node3_composition_n_0
                                   node3_composition_p_0)
                             (or (= (dest node3_composition_p_0) nodeB)))))
               (=> a!1 (or (= node3_composition_n_0 node4)))))))
  (=> a!1 (and node3@host4 node4@host4)))| () Int
  0)
(define-fun node3@host3 () Bool
  true)
(define-fun node3@host4 () Bool
  false)
(define-fun |integer_(let ((a!1 (forall ((node1_composition_n_0 Node) (node1_composition_p_0 packet))
             (let ((a!1 (and (send node1
                                   node1_composition_n_0
                                   node1_composition_p_0)
                             (or (= (dest node1_composition_p_0) nodeB)))))
               (=> a!1 (or (= node1_composition_n_0 node2)))))))
  (=> a!1 (and node1@host2 node2@host6)))| () Int
  0)
(define-fun host3 () Bool
  true)
(define-fun node3@host5 () Bool
  false)
(define-fun |integer_(let ((a!1 (forall ((node2_composition_n_0 Node) (node2_composition_p_0 packet))
             (let ((a!1 (and (send node2
                                   node2_composition_n_0
                                   node2_composition_p_0)
                             (or (= (dest node2_composition_p_0) nodeB)))))
               (=> a!1 (or (= node2_composition_n_0 node3)))))))
  (=> a!1 (and node2@host6 node3@host6)))| () Int
  0)
(define-fun |integer_(let ((a!1 (forall ((node3_composition_n_0 Node) (node3_composition_p_0 packet))
             (let ((a!1 (and (send node3
                                   node3_composition_n_0
                                   node3_composition_p_0)
                             (or (= (dest node3_composition_p_0) nodeB)))))
               (=> a!1 (or (= node3_composition_n_0 node4)))))))
  (=> a!1 (and node3@host3 node4@host4)))| () Int
  0)
(define-fun host1 () Bool
  true)
(define-fun |integer_(let ((a!1 (forall ((node4_composition_n_0 Node) (node4_composition_p_0 packet))
             (let ((a!1 (and (send node4
                                   node4_composition_n_0
                                   node4_composition_p_0)
                             (or (= (dest node4_composition_p_0) nodeB)))))
               (=> a!1 (or (= node4_composition_n_0 node5)))))))
  (=> a!1 (and node4@host2 node5@host3)))| () Int
  0)
(define-fun |integer_(let ((a!1 (forall ((nodeA_composition_n_0 Node) (nodeA_composition_p_0 packet))
             (let ((a!1 (and (send nodeA
                                   nodeA_composition_n_0
                                   nodeA_composition_p_0)
                             (or (= (dest nodeA_composition_p_0) nodeB)))))
               (=> a!1 (or (= nodeA_composition_n_0 node1)))))))
  (=> a!1 node1@host1))| () Int
  1)
(define-fun |integer_(let ((a!1 (forall ((node4_composition_n_0 Node) (node4_composition_p_0 packet))
             (let ((a!1 (and (send node4
                                   node4_composition_n_0
                                   node4_composition_p_0)
                             (or (= (dest node4_composition_p_0) nodeB)))))
               (=> a!1 (or (= node4_composition_n_0 node5)))))))
  (=> a!1 (and node4@host1 node5@host2)))| () Int
  0)
(define-fun hostB () Bool
  false)
(define-fun |integer_(let ((a!1 (forall ((node2_composition_n_0 Node) (node2_composition_p_0 packet))
             (let ((a!1 (and (send node2
                                   node2_composition_n_0
                                   node2_composition_p_0)
                             (or (= (dest node2_composition_p_0) nodeB)))))
               (=> a!1 (or (= node2_composition_n_0 node3)))))))
  (=> a!1 (and node2@host1 node3@host2)))| () Int
  0)
(define-fun |integer_(let ((a!1 (forall ((node3_composition_n_0 Node) (node3_composition_p_0 packet))
             (let ((a!1 (and (send node3
                                   node3_composition_n_0
                                   node3_composition_p_0)
                             (or (= (dest node3_composition_p_0) nodeB)))))
               (=> a!1 (or (= node3_composition_n_0 node4)))))))
  (=> a!1 (and node3@host1 node4@host4)))| () Int
  0)
(define-fun |integer_(let ((a!1 (forall ((node3_composition_n_0 Node) (node3_composition_p_0 packet))
             (let ((a!1 (and (send node3
                                   node3_composition_n_0
                                   node3_composition_p_0)
                             (or (= (dest node3_composition_p_0) nodeB)))))
               (=> a!1 (or (= node3_composition_n_0 node4)))))))
  (=> a!1 (and node3@host2 node4@host6)))| () Int
  0)
(define-fun hostA () Bool
  false)
(define-fun node4@host6 () Bool
  false)
(define-fun |integer_(let ((a!1 (forall ((node1_composition_n_0 Node) (node1_composition_p_0 packet))
             (let ((a!1 (and (send node1
                                   node1_composition_n_0
                                   node1_composition_p_0)
                             (or (= (dest node1_composition_p_0) nodeB)))))
               (=> a!1 (or (= node1_composition_n_0 node2)))))))
  (=> a!1 (and node1@host2 node2@host1)))| () Int
  0)
(define-fun integer_node5@host3 () Int
  1)
(define-fun integer_host6 () Int
  0)
(define-fun |integer_(let ((a!1 (forall ((node4_composition_n_0 Node) (node4_composition_p_0 packet))
             (let ((a!1 (and (send node4
                                   node4_composition_n_0
                                   node4_composition_p_0)
                             (or (= (dest node4_composition_p_0) nodeB)))))
               (=> a!1 (or (= node4_composition_n_0 node5)))))))
  (=> a!1 (and node4@host7 node5@host7)))| () Int
  0)
(define-fun |integer_(let ((a!1 (forall ((node2_composition_n_0 Node) (node2_composition_p_0 packet))
             (let ((a!1 (and (send node2
                                   node2_composition_n_0
                                   node2_composition_p_0)
                             (or (= (dest node2_composition_p_0) nodeB)))))
               (=> a!1 (or (= node2_composition_n_0 node3)))))))
  (=> a!1 (and node2@host6 node3@host7)))| () Int
  0)
(define-fun node4@host7 () Bool
  false)
(define-fun |integer_(let ((a!1 (forall ((node3_composition_n_0 Node) (node3_composition_p_0 packet))
             (let ((a!1 (and (send node3
                                   node3_composition_n_0
                                   node3_composition_p_0)
                             (or (= (dest node3_composition_p_0) nodeB)))))
               (=> a!1 (or (= node3_composition_n_0 node4)))))))
  (=> a!1 (and node3@host2 node4@host4)))| () Int
  0)
(define-fun integer_node3@host2 () Int
  0)
(define-fun node5@host7 () Bool
  false)
(define-fun |integer_(let ((a!1 (forall ((node1_composition_n_0 Node) (node1_composition_p_0 packet))
             (let ((a!1 (and (send node1
                                   node1_composition_n_0
                                   node1_composition_p_0)
                             (or (= (dest node1_composition_p_0) nodeB)))))
               (=> a!1 (or (= node1_composition_n_0 node2)))))))
  (=> a!1 (and node1@host2 node2@host2)))| () Int
  0)
(define-fun politoCache_node3_p_1 () packet
  (packet node2 node2 node2 node2 node1 46 47 48 49 50 51 52 false))
(define-fun node1@host2 () Bool
  false)
(define-fun |integer_(let ((a!1 (forall ((node4_composition_n_0 Node) (node4_composition_p_0 packet))
             (let ((a!1 (and (send node4
                                   node4_composition_n_0
                                   node4_composition_p_0)
                             (or (= (dest node4_composition_p_0) nodeB)))))
               (=> a!1 (or (= node4_composition_n_0 node5)))))))
  (=> a!1 (and node4@host1 node5@host3)))| () Int
  0)
(define-fun |integer_(let ((a!1 (forall ((node2_composition_n_0 Node) (node2_composition_p_0 packet))
             (let ((a!1 (and (send node2
                                   node2_composition_n_0
                                   node2_composition_p_0)
                             (or (= (dest node2_composition_p_0) nodeB)))))
               (=> a!1 (or (= node2_composition_n_0 node3)))))))
  (=> a!1 (and node2@host2 node3@host6)))| () Int
  0)
(define-fun node2@host3 () Bool
  true)
(define-fun integer_node2@host2 () Int
  0)
(define-fun integer_node4@host1 () Int
  0)
(define-fun check_isolation_p1_nodeA_nodeB () packet
  (packet nodeA nodeB nodeB node2 nodeA 41 41 42 1 43 44 45 false))
(define-fun |integer_(let ((a!1 (forall ((node3_composition_n_0 Node) (node3_composition_p_0 packet))
             (let ((a!1 (and (send node3
                                   node3_composition_n_0
                                   node3_composition_p_0)
                             (or (= (dest node3_composition_p_0) nodeB)))))
               (=> a!1 (or (= node3_composition_n_0 node4)))))))
  (=> a!1 (and node3@host3 node4@host2)))| () Int
  0)
(define-fun integer_host3 () Int
  1)
(define-fun |integer_(let ((a!1 (forall ((node3_composition_n_0 Node) (node3_composition_p_0 packet))
             (let ((a!1 (and (send node3
                                   node3_composition_n_0
                                   node3_composition_p_0)
                             (or (= (dest node3_composition_p_0) nodeB)))))
               (=> a!1 (or (= node3_composition_n_0 node4)))))))
  (=> a!1 (and node3@host1 node4@host2)))| () Int
  0)
(define-fun node5@host2 () Bool
  false)
(define-fun |integer_(let ((a!1 (forall ((node2_composition_n_0 Node) (node2_composition_p_0 packet))
             (let ((a!1 (and (send node2
                                   node2_composition_n_0
                                   node2_composition_p_0)
                             (or (= (dest node2_composition_p_0) nodeB)))))
               (=> a!1 (or (= node2_composition_n_0 node3)))))))
  (=> a!1 (and node2@host3 node3@host4)))| () Int
  0)
(define-fun integer_node2@host3 () Int
  1)
(define-fun |integer_(let ((a!1 (forall ((node2_composition_n_0 Node) (node2_composition_p_0 packet))
             (let ((a!1 (and (send node2
                                   node2_composition_n_0
                                   node2_composition_p_0)
                             (or (= (dest node2_composition_p_0) nodeB)))))
               (=> a!1 (or (= node2_composition_n_0 node3)))))))
  (=> a!1 (and node2@host1 node3@host3)))| () Int
  0)
(define-fun integer_node2@host1 () Int
  0)
(define-fun host5 () Bool
  false)
(define-fun |integer_(let ((a!1 (forall ((node4_composition_n_0 Node) (node4_composition_p_0 packet))
             (let ((a!1 (and (send node4
                                   node4_composition_n_0
                                   node4_composition_p_0)
                             (or (= (dest node4_composition_p_0) nodeB)))))
               (=> a!1 (or (= node4_composition_n_0 node5)))))))
  (=> a!1 (and node4@host3 node5@host3)))| () Int
  1)
(define-fun |integer_(let ((a!1 (forall ((node2_composition_n_0 Node) (node2_composition_p_0 packet))
             (let ((a!1 (and (send node2
                                   node2_composition_n_0
                                   node2_composition_p_0)
                             (or (= (dest node2_composition_p_0) nodeB)))))
               (=> a!1 (or (= node2_composition_n_0 node3)))))))
  (=> a!1 (and node2@host3 node3@host2)))| () Int
  0)
(define-fun integer_host4 () Int
  0)
(define-fun check_isolation_n_1_nodeA_nodeB () Node
  node1)
(define-fun integer_node4@host3 () Int
  1)
(define-fun |integer_(let ((a!1 (forall ((node3_composition_n_0 Node) (node3_composition_p_0 packet))
             (let ((a!1 (and (send node3
                                   node3_composition_n_0
                                   node3_composition_p_0)
                             (or (= (dest node3_composition_p_0) nodeB)))))
               (=> a!1 (or (= node3_composition_n_0 node4)))))))
  (=> a!1 (and node3@host3 node4@host3)))| () Int
  1)
(define-fun |integer_(let ((a!1 (forall ((node2_composition_n_0 Node) (node2_composition_p_0 packet))
             (let ((a!1 (and (send node2
                                   node2_composition_n_0
                                   node2_composition_p_0)
                             (or (= (dest node2_composition_p_0) nodeB)))))
               (=> a!1 (or (= node2_composition_n_0 node3)))))))
  (=> a!1 (and node2@host3 node3@host5)))| () Int
  0)
(define-fun check_isolation_p0_nodeA_nodeB () packet
  (packet nodeA nodeB node2 nodeB nodeA 36 36 37 1 38 39 40 false))
(define-fun |integer_(let ((a!1 (forall ((node3_composition_n_0 Node) (node3_composition_p_0 packet))
             (let ((a!1 (and (send node3
                                   node3_composition_n_0
                                   node3_composition_p_0)
                             (or (= (dest node3_composition_p_0) nodeB)))))
               (=> a!1 (or (= node3_composition_n_0 node4)))))))
  (=> a!1 (and node3@host2 node4@host3)))| () Int
  0)
(define-fun node3@host6 () Bool
  false)
(define-fun integer_node3@host1 () Int
  0)
(define-fun host4 () Bool
  false)
(define-fun |integer_(let ((a!1 (forall ((node4_composition_n_0 Node) (node4_composition_p_0 packet))
             (let ((a!1 (and (send node4
                                   node4_composition_n_0
                                   node4_composition_p_0)
                             (or (= (dest node4_composition_p_0) nodeB)))))
               (=> a!1 (or (= node4_composition_n_0 node5)))))))
  (=> a!1 (and node4@host2 node5@host2)))| () Int
  0)
(define-fun |integer_(let ((a!1 (forall ((node3_composition_n_0 Node) (node3_composition_p_0 packet))
             (let ((a!1 (and (send node3
                                   node3_composition_n_0
                                   node3_composition_p_0)
                             (or (= (dest node3_composition_p_0) nodeB)))))
               (=> a!1 (or (= node3_composition_n_0 node4)))))))
  (=> a!1 (and node3@host6 node4@host6)))| () Int
  0)
(define-fun |integer_(let ((a!1 (forall ((node4_composition_n_0 Node) (node4_composition_p_0 packet))
             (let ((a!1 (and (send node4
                                   node4_composition_n_0
                                   node4_composition_p_0)
                             (or (= (dest node4_composition_p_0) nodeB)))))
               (=> a!1 (or (= node4_composition_n_0 node5)))))))
  (=> a!1 (and node4@host6 node5@host7)))| () Int
  0)
(define-fun integer_node5@host2 () Int
  0)
(define-fun integer_node3@host4 () Int
  0)
(define-fun integer_node1@host2 () Int
  0)
(define-fun |integer_(let ((a!1 (forall ((node1_composition_n_0 Node) (node1_composition_p_0 packet))
             (let ((a!1 (and (send node1
                                   node1_composition_n_0
                                   node1_composition_p_0)
                             (or (= (dest node1_composition_p_0) nodeB)))))
               (=> a!1 (or (= node1_composition_n_0 node2)))))))
  (=> a!1 (and node1@host1 node2@host3)))| () Int
  1)
(define-fun |integer_(let ((a!1 (forall ((node2_composition_n_0 Node) (node2_composition_p_0 packet))
             (let ((a!1 (and (send node2
                                   node2_composition_n_0
                                   node2_composition_p_0)
                             (or (= (dest node2_composition_p_0) nodeB)))))
               (=> a!1 (or (= node2_composition_n_0 node3)))))))
  (=> a!1 (and node2@host3 node3@host3)))| () Int
  1)
(define-fun node2@host1 () Bool
  false)
(define-fun |integer_(let ((a!1 (forall ((node2_composition_n_0 Node) (node2_composition_p_0 packet))
             (let ((a!1 (and (send node2
                                   node2_composition_n_0
                                   node2_composition_p_0)
                             (or (= (dest node2_composition_p_0) nodeB)))))
               (=> a!1 (or (= node2_composition_n_0 node3)))))))
  (=> a!1 (and node2@host2 node3@host1)))| () Int
  0)
(define-fun |integer_(let ((a!1 (forall ((node2_composition_n_0 Node) (node2_composition_p_0 packet))
             (let ((a!1 (and (send node2
                                   node2_composition_n_0
                                   node2_composition_p_0)
                             (or (= (dest node2_composition_p_0) nodeB)))))
               (=> a!1 (or (= node2_composition_n_0 node3)))))))
  (=> a!1 (and node2@host2 node3@host3)))| () Int
  0)
(define-fun |integer_(let ((a!1 (forall ((node3_composition_n_0 Node) (node3_composition_p_0 packet))
             (let ((a!1 (and (send node3
                                   node3_composition_n_0
                                   node3_composition_p_0)
                             (or (= (dest node3_composition_p_0) nodeB)))))
               (=> a!1 (or (= node3_composition_n_0 node4)))))))
  (=> a!1 (and node3@host2 node4@host2)))| () Int
  0)
(define-fun |integer_(let ((a!1 (forall ((node1_composition_n_0 Node) (node1_composition_p_0 packet))
             (let ((a!1 (and (send node1
                                   node1_composition_n_0
                                   node1_composition_p_0)
                             (or (= (dest node1_composition_p_0) nodeB)))))
               (=> a!1 (or (= node1_composition_n_0 node2)))))))
  (=> a!1 (and node1@host2 node2@host3)))| () Int
  0)
(define-fun integer_node4@host6 () Int
  0)
(define-fun integer_host2 () Int
  0)
(define-fun node2@host2 () Bool
  false)
(define-fun |integer_(let ((a!1 (forall ((node5_composition_n_0 Node) (node5_composition_p_0 packet))
             (let ((a!1 (and (send node5
                                   node5_composition_n_0
                                   node5_composition_p_0)
                             (or (= (dest node5_composition_p_0) nodeB)))))
               (=> a!1 (or (= node5_composition_n_0 nodeB)))))))
  (=> a!1 node5@host3))| () Int
  1)
(define-fun node4@host2 () Bool
  false)
(define-fun node2@host4 () Bool
  false)
(define-fun integer_node4@host4 () Int
  0)
(define-fun integer_node1@host1 () Int
  1)
(define-fun integer_node3@host5 () Int
  0)
(define-fun integer_node2@host6 () Int
  0)
(define-fun integer_node2@host4 () Int
  0)
(define-fun integer_node5@host7 () Int
  0)
(define-fun hostB_composition_FIELDMODIFIER () Bool
  false)
(define-fun hostB_composition_WEBSERVER () Bool
  false)
(define-fun hostB_composition_WEBCLIENT () Bool
  false)
(define-fun hostB_composition_VPNEXIT () Bool
  false)
(define-fun hostB_composition_VPNACCESS () Bool
  false)
(define-fun hostB_composition_NAT () Bool
  false)
(define-fun hostB_composition_MAILSERVER () Bool
  false)
(define-fun hostB_composition_MAILCLIENT () Bool
  false)
(define-fun hostB_composition_DPI () Bool
  false)
(define-fun hostB_composition_CACHE () Bool
  false)
(define-fun hostB_composition_ANTISPAM () Bool
  false)
(define-fun hostB_composition_ENDPOINT () Bool
  false)
(define-fun hostB_composition_ENDHOST () Bool
  false)
(define-fun hostB_composition_FIREWALL () Bool
  false)
(define-fun host7_composition_FIELDMODIFIER () Bool
  true)
(define-fun host7_composition_WEBSERVER () Bool
  false)
(define-fun host7_composition_WEBCLIENT () Bool
  false)
(define-fun host7_composition_VPNEXIT () Bool
  false)
(define-fun host7_composition_VPNACCESS () Bool
  false)
(define-fun host7_composition_NAT () Bool
  true)
(define-fun host7_composition_MAILSERVER () Bool
  false)
(define-fun host7_composition_MAILCLIENT () Bool
  false)
(define-fun host7_composition_DPI () Bool
  true)
(define-fun host7_composition_CACHE () Bool
  true)
(define-fun host7_composition_ANTISPAM () Bool
  true)
(define-fun host7_composition_ENDPOINT () Bool
  false)
(define-fun host7_composition_ENDHOST () Bool
  false)
(define-fun host7_composition_FIREWALL () Bool
  true)
(define-fun host6_composition_FIELDMODIFIER () Bool
  true)
(define-fun host6_composition_WEBSERVER () Bool
  false)
(define-fun host6_composition_WEBCLIENT () Bool
  false)
(define-fun host6_composition_VPNEXIT () Bool
  false)
(define-fun host6_composition_VPNACCESS () Bool
  false)
(define-fun host6_composition_NAT () Bool
  true)
(define-fun host6_composition_MAILSERVER () Bool
  false)
(define-fun host6_composition_MAILCLIENT () Bool
  false)
(define-fun host6_composition_DPI () Bool
  true)
(define-fun host6_composition_CACHE () Bool
  true)
(define-fun host6_composition_ANTISPAM () Bool
  true)
(define-fun host6_composition_ENDPOINT () Bool
  false)
(define-fun host6_composition_ENDHOST () Bool
  false)
(define-fun host6_composition_FIREWALL () Bool
  true)
(define-fun host5_composition_FIELDMODIFIER () Bool
  true)
(define-fun host5_composition_WEBSERVER () Bool
  false)
(define-fun host5_composition_WEBCLIENT () Bool
  false)
(define-fun host5_composition_VPNEXIT () Bool
  false)
(define-fun host5_composition_VPNACCESS () Bool
  false)
(define-fun host5_composition_NAT () Bool
  true)
(define-fun host5_composition_MAILSERVER () Bool
  false)
(define-fun host5_composition_MAILCLIENT () Bool
  false)
(define-fun host5_composition_DPI () Bool
  true)
(define-fun host5_composition_CACHE () Bool
  true)
(define-fun host5_composition_ANTISPAM () Bool
  true)
(define-fun host5_composition_ENDPOINT () Bool
  false)
(define-fun host5_composition_ENDHOST () Bool
  false)
(define-fun host5_composition_FIREWALL () Bool
  true)
(define-fun host4_composition_FIELDMODIFIER () Bool
  true)
(define-fun host4_composition_WEBSERVER () Bool
  false)
(define-fun host4_composition_WEBCLIENT () Bool
  false)
(define-fun host4_composition_VPNEXIT () Bool
  false)
(define-fun host4_composition_VPNACCESS () Bool
  false)
(define-fun host4_composition_NAT () Bool
  false)
(define-fun host4_composition_MAILSERVER () Bool
  false)
(define-fun host4_composition_MAILCLIENT () Bool
  false)
(define-fun host4_composition_DPI () Bool
  false)
(define-fun host4_composition_CACHE () Bool
  true)
(define-fun host4_composition_ANTISPAM () Bool
  false)
(define-fun host4_composition_ENDPOINT () Bool
  false)
(define-fun host4_composition_ENDHOST () Bool
  false)
(define-fun host4_composition_FIREWALL () Bool
  true)
(define-fun host3_composition_FIELDMODIFIER () Bool
  true)
(define-fun host3_composition_WEBSERVER () Bool
  false)
(define-fun host3_composition_WEBCLIENT () Bool
  false)
(define-fun host3_composition_VPNEXIT () Bool
  false)
(define-fun host3_composition_VPNACCESS () Bool
  false)
(define-fun host3_composition_NAT () Bool
  true)
(define-fun host3_composition_MAILSERVER () Bool
  false)
(define-fun host3_composition_MAILCLIENT () Bool
  false)
(define-fun host3_composition_DPI () Bool
  true)
(define-fun host3_composition_CACHE () Bool
  true)
(define-fun host3_composition_ANTISPAM () Bool
  true)
(define-fun host3_composition_ENDPOINT () Bool
  false)
(define-fun host3_composition_ENDHOST () Bool
  false)
(define-fun host3_composition_FIREWALL () Bool
  true)
(define-fun host2_composition_FIELDMODIFIER () Bool
  true)
(define-fun host2_composition_WEBSERVER () Bool
  false)
(define-fun host2_composition_WEBCLIENT () Bool
  false)
(define-fun host2_composition_VPNEXIT () Bool
  false)
(define-fun host2_composition_VPNACCESS () Bool
  false)
(define-fun host2_composition_NAT () Bool
  true)
(define-fun host2_composition_MAILSERVER () Bool
  false)
(define-fun host2_composition_MAILCLIENT () Bool
  false)
(define-fun host2_composition_DPI () Bool
  true)
(define-fun host2_composition_CACHE () Bool
  true)
(define-fun host2_composition_ANTISPAM () Bool
  true)
(define-fun host2_composition_ENDPOINT () Bool
  false)
(define-fun host2_composition_ENDHOST () Bool
  false)
(define-fun host2_composition_FIREWALL () Bool
  true)
(define-fun host1_composition_FIELDMODIFIER () Bool
  true)
(define-fun host1_composition_WEBSERVER () Bool
  false)
(define-fun host1_composition_WEBCLIENT () Bool
  false)
(define-fun host1_composition_VPNEXIT () Bool
  false)
(define-fun host1_composition_VPNACCESS () Bool
  false)
(define-fun host1_composition_NAT () Bool
  true)
(define-fun host1_composition_MAILSERVER () Bool
  false)
(define-fun host1_composition_MAILCLIENT () Bool
  false)
(define-fun host1_composition_DPI () Bool
  true)
(define-fun host1_composition_CACHE () Bool
  true)
(define-fun host1_composition_ANTISPAM () Bool
  true)
(define-fun host1_composition_ENDPOINT () Bool
  false)
(define-fun host1_composition_ENDHOST () Bool
  false)
(define-fun host1_composition_FIREWALL () Bool
  true)
(define-fun hostA_composition_FIELDMODIFIER () Bool
  false)
(define-fun hostA_composition_WEBSERVER () Bool
  false)
(define-fun hostA_composition_WEBCLIENT () Bool
  false)
(define-fun hostA_composition_VPNEXIT () Bool
  false)
(define-fun hostA_composition_VPNACCESS () Bool
  false)
(define-fun hostA_composition_NAT () Bool
  false)
(define-fun hostA_composition_MAILSERVER () Bool
  false)
(define-fun hostA_composition_MAILCLIENT () Bool
  false)
(define-fun hostA_composition_DPI () Bool
  false)
(define-fun hostA_composition_CACHE () Bool
  false)
(define-fun hostA_composition_ANTISPAM () Bool
  false)
(define-fun hostA_composition_ENDPOINT () Bool
  false)
(define-fun hostA_composition_ENDHOST () Bool
  false)
(define-fun hostA_composition_FIREWALL () Bool
  false)
(define-fun |integer_(let ((a!1 (forall ((node1_composition_n_0 Node) (node1_composition_p_0 packet))
             (let ((a!1 (and (send node1
                                   node1_composition_n_0
                                   node1_composition_p_0)
                             (or (= (dest node1_composition_p_0) nodeB)))))
               (=> a!1 (or (= node1_composition_n_0 node2)))))))
  (=> a!1 (and node1@host1 node2@host4)))| () Int
  0)
(define-fun |integer_(let ((a!1 (forall ((node1_composition_n_0 Node) (node1_composition_p_0 packet))
             (let ((a!1 (and (send node1
                                   node1_composition_n_0
                                   node1_composition_p_0)
                             (or (= (dest node1_composition_p_0) nodeB)))))
               (=> a!1 (or (= node1_composition_n_0 node2)))))))
  (=> a!1 (and node1@host2 node2@host4)))| () Int
  0)
(define-fun |integer_(let ((a!1 (forall ((node2_composition_n_0 Node) (node2_composition_p_0 packet))
             (let ((a!1 (and (send node2
                                   node2_composition_n_0
                                   node2_composition_p_0)
                             (or (= (dest node2_composition_p_0) nodeB)))))
               (=> a!1 (or (= node2_composition_n_0 node3)))))))
  (=> a!1 (and node2@host4 node3@host7)))| () Int
  0)
(define-fun |integer_(let ((a!1 (forall ((node2_composition_n_0 Node) (node2_composition_p_0 packet))
             (let ((a!1 (and (send node2
                                   node2_composition_n_0
                                   node2_composition_p_0)
                             (or (= (dest node2_composition_p_0) nodeB)))))
               (=> a!1 (or (= node2_composition_n_0 node3)))))))
  (=> a!1 (and node2@host4 node3@host5)))| () Int
  0)
(define-fun |integer_(let ((a!1 (forall ((node2_composition_n_0 Node) (node2_composition_p_0 packet))
             (let ((a!1 (and (send node2
                                   node2_composition_n_0
                                   node2_composition_p_0)
                             (or (= (dest node2_composition_p_0) nodeB)))))
               (=> a!1 (or (= node2_composition_n_0 node3)))))))
  (=> a!1 (and node2@host4 node3@host4)))| () Int
  0)
(define-fun |integer_(let ((a!1 (forall ((node4_composition_n_0 Node) (node4_composition_p_0 packet))
             (let ((a!1 (and (send node4
                                   node4_composition_n_0
                                   node4_composition_p_0)
                             (or (= (dest node4_composition_p_0) nodeB)))))
               (=> a!1 (or (= node4_composition_n_0 node5)))))))
  (=> a!1 (and node4@host3 node5@host2)))| () Int
  0)
(define-fun |integer_(let ((a!1 (forall ((node1_composition_n_0 Node) (node1_composition_p_0 packet))
             (let ((a!1 (and (send node1
                                   node1_composition_n_0
                                   node1_composition_p_0)
                             (or (= (dest node1_composition_p_0) nodeB)))))
               (=> a!1 (or (= node1_composition_n_0 node2)))))))
  (=> a!1 (and node1@host1 node2@host2)))| () Int
  0)
(define-fun |integer_(let ((a!1 (forall ((node3_composition_n_0 Node) (node3_composition_p_0 packet))
             (let ((a!1 (and (send node3
                                   node3_composition_n_0
                                   node3_composition_p_0)
                             (or (= (dest node3_composition_p_0) nodeB)))))
               (=> a!1 (or (= node3_composition_n_0 node4)))))))
  (=> a!1 (and node3@host7 node4@host7)))| () Int
  0)
(define-fun |integer_(let ((a!1 (forall ((node2_composition_n_0 Node) (node2_composition_p_0 packet))
             (let ((a!1 (and (send node2
                                   node2_composition_n_0
                                   node2_composition_p_0)
                             (or (= (dest node2_composition_p_0) nodeB)))))
               (=> a!1 (or (= node2_composition_n_0 node3)))))))
  (=> a!1 (and node2@host2 node3@host2)))| () Int
  0)
(define-fun |integer_(let ((a!1 (forall ((nodeA_composition_n_0 Node) (nodeA_composition_p_0 packet))
             (let ((a!1 (and (send nodeA
                                   nodeA_composition_n_0
                                   nodeA_composition_p_0)
                             (or (= (dest nodeA_composition_p_0) nodeB)))))
               (=> a!1 (or (= nodeA_composition_n_0 node1)))))))
  (=> a!1 node1@host2))| () Int
  0)
(define-fun |integer_(let ((a!1 (forall ((node5_composition_n_0 Node) (node5_composition_p_0 packet))
             (let ((a!1 (and (send node5
                                   node5_composition_n_0
                                   node5_composition_p_0)
                             (or (= (dest node5_composition_p_0) nodeB)))))
               (=> a!1 (or (= node5_composition_n_0 nodeB)))))))
  (=> a!1 node5@host2))| () Int
  0)
(define-fun politoFieldModifier_node4_y!14!2234 ((x!0 packet)) Node
  (ite (= x!0 (packet nodeA nodeB nodeB node2 nodeA 41 41 42 1 43 44 45 false))
    node5
    node3))
(define-fun k!2229 ((x!0 packet)) packet
  (ite (= x!0 (packet nodeA nodeB node2 nodeB nodeA 36 36 37 1 38 39 40 false))
    (packet nodeA nodeB node2 nodeB nodeA 36 36 37 1 38 39 40 false)
  (ite (= x!0 (packet nodeA nodeB nodeB node2 nodeA 41 41 42 1 43 44 45 false))
    (packet nodeA nodeB nodeB node2 nodeA 41 41 42 1 43 44 45 false)
  (ite (= x!0 (packet node1 node1 node1 node1 node2 0 1 2 3 4 5 6 false))
    (packet node1 node1 node1 node1 node2 0 1 2 3 4 5 6 false)
  (ite (= x!0 (packet node1 node1 nodeA nodeA node2 7 8 9 10 11 12 13 true))
    (packet node1 node1 nodeA nodeA node2 7 8 9 10 11 12 13 true)
  (ite (= x!0 (packet node1 node1 node1 null node2 0 1 2 3 4 5 6 false))
    (packet node1 node1 node1 null node2 0 1 2 3 4 5 6 false)
  (ite (= x!0 (packet node1 node1 node1 node1 node2 0 2 3 4 5 6 7 false))
    (packet node1 node1 node1 node1 node2 0 2 3 4 5 6 7 false)
  (ite (= x!0 (packet node1 node1 node1 node1 node2 0 3 4 5 6 7 8 false))
    (packet node1 node1 node1 node1 node2 0 3 4 5 6 7 8 false)
  (ite (= x!0 (packet node1 node1 null node1 node2 0 1 2 3 4 5 6 false))
    (packet node1 node1 null node1 node2 0 1 2 3 4 5 6 false)
    (packet null node1 node1 node1 node2 0 1 2 3 4 5 6 false))))))))))
(define-fun politoFieldModifier_node4_y!14 ((x!0 packet)) Node
  (politoFieldModifier_node4_y!14!2234 (k!2229 x!0)))
(define-fun node2_n_1!5 ((x!0 packet)) Node
  node1)
(define-fun politoCache_node3_n_1!7 ((x!0 Int)) Node
  node2)
(define-fun node3_isInternalNode!2235 ((x!0 Node)) Bool
  (ite (= x!0 nodeA) true
  (ite (= x!0 node1) true
  (ite (= x!0 node2) true
    false))))
(define-fun k!2230 ((x!0 Node)) Node
  (ite (= x!0 nodeA) nodeA
  (ite (= x!0 node5) node5
  (ite (= x!0 node3) node3
  (ite (= x!0 node2) node2
  (ite (= x!0 node1) node1
  (ite (= x!0 nodeB) nodeB
    node4)))))))
(define-fun node3_isInternalNode ((x!0 Node)) Bool
  (node3_isInternalNode!2235 (k!2230 x!0)))
(define-fun node1_firewall_send_n_1!12 ((x!0 packet)) Node
  nodeA)
(define-fun politoFieldModifier_node5_p_1!3 ((x!0 packet)) packet
  (packet nodeA nodeB node2 nodeB nodeA 36 36 37 1 38 39 40 false))
(define-fun recv!2236 ((x!0 Node) (x!1 Node) (x!2 packet)) Bool
  (ite (and (= x!0 node5)
            (= x!1 nodeB)
            (= x!2
               (packet nodeA nodeB node2 nodeB nodeA 36 36 37 1 38 39 40 false)))
    true
  (ite (and (= x!0 nodeA)
            (= x!1 node1)
            (= x!2
               (packet nodeA nodeB nodeB node2 nodeA 41 41 42 1 43 44 45 false)))
    true
  (ite (and (= x!0 node2)
            (= x!1 node3)
            (= x!2
               (packet nodeA nodeB node2 nodeB nodeA 36 36 37 1 38 39 40 false)))
    true
  (ite (and (= x!0 node4)
            (= x!1 node5)
            (= x!2
               (packet nodeA nodeB node2 nodeB nodeA 36 36 37 1 38 39 40 false)))
    true
  (ite (and (= x!0 nodeA)
            (= x!1 node1)
            (= x!2
               (packet nodeA nodeB node2 nodeB nodeA 36 36 37 1 38 39 40 false)))
    true
  (ite (and (= x!0 node1)
            (= x!1 node2)
            (= x!2
               (packet nodeA nodeB node2 nodeB nodeA 36 36 37 1 38 39 40 false)))
    true
  (ite (and (= x!0 node3)
            (= x!1 node4)
            (= x!2
               (packet nodeA nodeB node2 nodeB nodeA 36 36 37 1 38 39 40 false)))
    true
    false))))))))
(define-fun recv ((x!0 Node) (x!1 Node) (x!2 packet)) Bool
  (recv!2236 (k!2230 x!0) (k!2230 x!1) (k!2229 x!2)))
(define-fun politoFieldModifier_node4_p_1!13!2240 ((x!0 packet)) packet
  (ite (= x!0 (packet nodeA nodeB nodeB node2 nodeA 41 41 42 1 43 44 45 false))
    (packet node4 node4 node4 node4 node5 62 63 64 65 66 67 68 false)
    (packet nodeA nodeB node2 nodeB nodeA 36 36 37 1 38 39 40 false)))
(define-fun node3_isInCache ((x!0 Int)) Bool
  false)
(define-fun politoFieldModifier_node5_y!4 ((x!0 packet)) Node
  node4)
(define-fun politoCache_node3_p_1!11 ((x!0 packet) (x!1 Node)) packet
  (packet node4 node4 node4 node4 node5 55 56 57 58 59 60 61 false))
(define-fun politoFieldModifier_node4_p_1!13 ((x!0 packet)) packet
  (politoFieldModifier_node4_p_1!13!2240 (k!2229 x!0)))
(define-fun politoCache_node3_p_1!9 ((x!0 Int)) packet
  (packet null node1 node1 node1 node2 0 1 2 3 4 5 6 false))
(define-fun node2_isInBlacklist!2237 ((x!0 Int)) Bool
  (ite (= x!0 36) false
    true))
(define-fun dport ((x!0 packet)) Int
  0)
(define-fun nodeHasAddr!2239 ((x!0 Node) (x!1 Address)) Bool
  (ite (and (= x!0 nodeA) (= x!1 nodeA)) true
  (ite (and (= x!0 nodeB) (= x!1 nodeB)) true
  (ite (and (= x!0 node1) (= x!1 node1)) true
  (ite (and (= x!0 node2) (= x!1 node2)) true
  (ite (and (= x!0 node3) (= x!1 node3)) true
  (ite (and (= x!0 node4) (= x!1 node4)) true
  (ite (and (= x!0 node5) (= x!1 node5)) true
    false))))))))
(define-fun k!2233 ((x!0 Int)) Int
  (ite (= x!0 104993409) 104993409
    36))
(define-fun node2_isInBlacklist ((x!0 Int)) Bool
  (node2_isInBlacklist!2237 (k!2233 x!0)))
(define-fun politoCache_node3_p_2!8 ((x!0 Int)) packet
  (packet null node1 node1 node1 node2 0 1 2 3 4 5 6 false))
(define-fun k!2232 ((x!0 Address)) Address
  (ite (= x!0 nodeA) nodeA
  (ite (= x!0 node4) node4
  (ite (= x!0 node2) node2
  (ite (= x!0 node1) node1
  (ite (= x!0 nodeB) nodeB
  (ite (= x!0 node5) node5
  (ite (= x!0 node3) node3
    null))))))))
(define-fun politoCache_node3_n_2!6 ((x!0 Int)) Node
  node2)
(define-fun send!2238 ((x!0 Node) (x!1 Node) (x!2 packet)) Bool
  (ite (and (= x!0 nodeA)
            (= x!1 node1)
            (= x!2
               (packet nodeA nodeB nodeB node2 nodeA 41 41 42 1 43 44 45 false)))
    true
  (ite (and (= x!0 node5)
            (= x!1 nodeB)
            (= x!2
               (packet nodeA nodeB node2 nodeB nodeA 36 36 37 1 38 39 40 false)))
    true
  (ite (and (= x!0 node4)
            (= x!1 node5)
            (= x!2
               (packet nodeA nodeB node2 nodeB nodeA 36 36 37 1 38 39 40 false)))
    true
  (ite (and (= x!0 node2)
            (= x!1 node3)
            (= x!2
               (packet nodeA nodeB node2 nodeB nodeA 36 36 37 1 38 39 40 false)))
    true
  (ite (and (= x!0 node3)
            (= x!1 node4)
            (= x!2
               (packet nodeA nodeB node2 nodeB nodeA 36 36 37 1 38 39 40 false)))
    true
  (ite (and (= x!0 node1)
            (= x!1 node2)
            (= x!2
               (packet nodeA nodeB node2 nodeB nodeA 36 36 37 1 38 39 40 false)))
    true
  (ite (and (= x!0 nodeA)
            (= x!1 node1)
            (= x!2
               (packet nodeA nodeB node2 nodeB nodeA 36 36 37 1 38 39 40 false)))
    true
    false))))))))
(define-fun send ((x!0 Node) (x!1 Node) (x!2 packet)) Bool
  (send!2238 (k!2230 x!0) (k!2230 x!1) (k!2229 x!2)))
(define-fun nodeHasAddr ((x!0 Node) (x!1 Address)) Bool
  (nodeHasAddr!2239 x!0 (k!2232 x!1)))
(define-fun webserver_nodeB_p_1!15 ((x!0 packet) (x!1 Node)) packet
  (packet node4 node4 node4 node4 node5 69 70 71 72 73 74 75 false))
(define-fun node1_acl_func ((x!0 Address) (x!1 Address)) Bool
  false)
(define-fun addrToNode ((x!0 Address)) Node
  (ite (= x!0 node1) node1
  (ite (= x!0 node2) node2
  (ite (= x!0 node3) node3
  (ite (= x!0 node4) node4
  (ite (= x!0 node5) node5
  (ite (= x!0 nodeB) nodeB
    nodeA)))))))
(define-fun politoCache_node3_n_1!10 ((x!0 packet)) Node
  node2)
(define-fun sport ((x!0 packet)) Int
  0)</ParsingString>
</NFV>
