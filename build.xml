<?xml version="1.0" encoding="UTF-8"?>
<project name="Verigraph" default="package-service" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant">
	<description>
			Script for Verigraph
	</description>

	
	<property name="root.location" location="." />
	
	
	


	<!-- The location to be used for class files -->
	<property name="src.dir" location="${root.location}/src" />
	<property name="path.prefix" value="it/polito" />
	<property name="build.dir" location="${root.location}/build" />	
	<!-- The location for solutions -->
	<property name="lib.dir" location="${root.location}/lib" />
	<property name="schemadir" location="${root.location}/schema"/>
	<property name="schemafile" value="xml_components.xsd"/>
	<property name="target" value="1.8" />
	<property name="source" value="1.8" />		
	<property name="schemafile" value="xml_components.xsd"/>
	
	
	<property name="gen-tomcat-service.dir" location="${root.location}/target"/>
	<property name="resources.dir" location="${root.location}/webapp"/>
	<property name="gen-war.dir" location="${root.location}/war" />

	
	<import file="tomcat-build.xml"/>

	<target name="mvn-init" unless="compile.classpath" xmlns:artifact="urn:maven-artifact-ant">    
	    <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant"
	        classpath="lib/maven-ant-tasks-2.1.3.jar"/> 
	    <condition property="maven.repo.local" value="${maven.repo.local}" else="${user.home}/.m2/repository">
	        <isset property="maven.repo.local"/>
	    </condition>           
	    <echo>maven.repo.local=${maven.repo.local}</echo>
	    <artifact:localRepository id="local.repository" path="${maven.repo.local}"/> 
	    <artifact:pom file="pom.xml" id="maven.project"/>
	    <artifact:dependencies pathId="compile.classpath" filesetId="compile.fileset" useScope="compile">
	        <pom refid="maven.project"/>
	        <localRepository refid="local.repository"/>
	    </artifact:dependencies>
	    <artifact:dependencies pathId="test.classpath" filesetId="test.fileset" useScope="test">
	        <pom refid="maven.project"/>
	        <localRepository refid="local.repository"/>
	    </artifact:dependencies>
	    <artifact:dependencies pathId="runtime.classpath" filesetId="runtime.fileset" useScope="runtime">
	        <pom refid="maven.project"/>
	        <localRepository refid="local.repository"/>
	    </artifact:dependencies>
	</target>
	

	<target name="init">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${gen-tomcat-service.dir}"/>	
		<mkdir dir="${gen-war.dir}"/>
	</target>

	<target name="-chk-bindings">
			<uptodate property="generate-bindings.notRequired" targetfile="${src.dir}/.flagfile">
				<srcfiles dir="${schemadir}" includes="${schemaForBinding}"/>
			</uptodate>
		</target>
		
		<target name="generate-bindings" unless="generate-bindings.notRequired" depends="init,-chk-bindings" description="Create the value classes">
			<exec executable="xjc" failonerror="true" output="xjc_log.txt">
				<arg line="-d ${src.dir} -p it.polito.neo4j.jaxb ${schemadir}/${schemaForBinding}"/>
			</exec>
			<touch file="${src.dir}/.flagfile"/>
		</target>
	
	<!-- The target for compiling the Verigraph application -->
	<target name="build-service" depends="init, generate-bindings, mvn-init">
		<echo>Building verigraph (if needed)...</echo>
		<javac 
			classpathref="compile.classpath"
			destdir="${build.dir}"
			debug="${debug}"
			debuglevel="${debuglevel}"
			source="${source}"
			target="${target}"
			includeantruntime="false">
				<src path="${src.dir}" />
				<include name="${path.prefix}/**/*.java"/> 
				
				
		</javac>
		<echo>Done.</echo>
	</target>


	<macrodef name="war-exploded">	    
	    <sequential>
	    			<copy toDir="${gen-tomcat-service.dir}" overwrite="true">
	    	        	<fileset dir="${resources.dir}"/>
	    	      	</copy>
	    			<copy toDir="${gen-tomcat-service.dir}" overwrite="true">
	    	        	<fileset dir=".">
	    	        		<include name="server.properties"/>
	    				</fileset>
	    	      	</copy>
	    			<!-- copy class files to WEB-INF/classes directory -->
	    	    	<copy toDir="${gen-tomcat-service.dir}/WEB-INF/classes" overwrite="true">
	    	        	<fileset dir="${build.dir}"/>
	    	      	</copy>
	    			<!-- copy lib files to WEB-INF/lib directory -->
	    	    	<copy toDir="${gen-tomcat-service.dir}/maven-lib" overwrite="true">
	    	    		<fileset refid="runtime.fileset">	    	        		     		
	    				</fileset>
	    	      	</copy> 
	    			<copy toDir="${gen-tomcat-service.dir}/WEB-INF/lib" overwrite="true" flatten="true">
	    	    		<fileset dir="${gen-tomcat-service.dir}/maven-lib">	 
	    	    			<include name="**/**/*.jar"/>
	    				</fileset>
	    	      	</copy> 
			    	<delete dir="${gen-tomcat-service.dir}/maven-lib"/>
	    	
	    			<!-- Make the jar that includes only the classes needed for verigraph models --> 
	    			<jar destfile="${gen-tomcat-service.dir}/WEB-INF/lib/mcnet.jar">
	    				<fileset dir="${build.dir}">
	    					<include name="it/polito/verigraph/mcnet/**/*.class"/>
	    				</fileset>
	    			</jar>
			    	<!-- Copy the z3 library --> 
			    	<copy toDir="${gen-tomcat-service.dir}/WEB-INF/lib" overwrite="true" flatten="true">
	    	    		<file name="${lib.dir}/com.microsoft.z3.jar" />
	    	      	</copy> 
	    	
	    </sequential>
	</macrodef>          
	 
	<target name="war-exploded" depends="build-service">
	    <war-exploded/>  
		
	</target>
	 
	<target name="war" depends="war-exploded">       
	    <war destfile="${gen-war.dir}/${serviceName}.war" basedir="${gen-tomcat-service.dir}"/>
	</target>
		
	
	

	
	<!-- target for cleaning -->
	<target name="clean">
		<delete dir="${build.dir}" />
		<delete dir="${gen-tomcat-service.dir}"/>
	</target>

	
</project>
